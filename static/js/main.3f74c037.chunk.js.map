{"version":3,"sources":["components/AccountBalance.js","components/Home.js","components/UserProfile.js","components/Login.js","components/Credits.js","components/Debits.js","App.js","reportWebVitals.js","index.js"],"names":["AccountBalance","Number","this","props","accountBalance","toFixed","Component","Home","src","alt","to","UserProfile","userName","memberSince","LogIn","handleChange","e","updatedUser","state","user","target","value","setState","handleSubmit","preventDefault","mockLogIn","redirect","password","onSubmit","type","name","defaultValue","onChange","Credits","setAmount","amount","parseInt","setDescription","description","date","Date","credit","id","generateId","toISOString","addCredit","credits","forEach","index","creditsView","map","slice","required","placeholder","style","margin","Debits","debitsView","debits","debit","updateAmount","updateDescription","addDebit","App","logInInfo","newUser","currentUser","newCreditList","creditList","push","updateAccountBalance","newDebitList","debitList","newBalance","a","linkToDebits","axios","get","response","data","console","log","status","basename","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f74c037.chunk.js","sourcesContent":["/*==================================================\nsrc/components/AccountBalance.js\n\nThe AccountBalance component displays account balance. It is included in other page views.\n==================================================*/\nimport React, {Component} from 'react';\n\nclass AccountBalance extends Component {\n  // Display account balance\n  render() {\n    return (\n      <div>\n        Balance: ${Number(this.props.accountBalance).toFixed(2)}\n      </div>\n    );\n  }\n}\n\nexport default AccountBalance;","/*==================================================\nsrc/components/Home.js\n\nThe Home component is used to demonstrate the use of Link.\n==================================================*/\nimport React, {Component} from 'react';\nimport AccountBalance from './AccountBalance';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <img src=\"https://picsum.photos/200/200\" alt=\"bank\"/>\n\n        <h1>Bank of React</h1>\n\n        <Link to=\"/userProfile\">User Profile</Link>\n        <br/>\n        <Link to=\"/login\">Login</Link>\n        <br/>\n        <Link to=\"/credits\">Credits</Link>\n        <br/>\n        <Link to=\"/debits\">Debits</Link>\n        <br/><br/>\n        <AccountBalance accountBalance={this.props.accountBalance}/>\n      </div>\n    );\n  }\n}\n\nexport default Home;","/*==================================================\nsrc/components/UserProfile.js\n\nThe UserProfile component is used to demonstrate the use of Route and Link.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass UserProfile extends Component {\n  render() {\n    return (\n      <div>\n        <h1>User Profile</h1>\n\n        <div>Username: {this.props.userName}</div>\n        <div>Member Since: {this.props.memberSince}</div>\n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default UserProfile;","/*==================================================\nsrc/components/Login.js\n\nThe LogIn component is used to demonstrate the use of Redirect.\nNote: You don't need to work on this file for the Assignment.\n==================================================*/\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport {Link} from 'react-router-dom';\n\nclass LogIn extends Component {\n  constructor(props) {  // Create and initialize state\n    super(props)\n    this.state = {\n      user: {\n        //userName: '',\n        userName: this.props.user.userName,  // Initialize userName using props input (currentUser in App.js)\n        password: ''\n      },\n      redirect: false  // Redirect property used to trigger Redirect\n    }\n  }\n\n  // When User Name input is changed, capture the new input value and update state\n  handleChange = (e) => {\n    const updatedUser = {...this.state.user};  // Create an object for state\n    updatedUser.userName = e.target.value;  // Set object's userName to the new input value\n    this.setState({user: updatedUser})  // Update state with object values\n  }\n\n  // When user clicked \"Log In\" button, store user data and then redirect to \"User Profile\" page\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.mockLogIn(this.state.user)  // Update state in the top-level component (App.js)\n    this.setState({redirect: true})  // Update state to trigger Redirect\n  }\n  \n  render () {\n    // Redirect to \"User Profile\" page when \"Log In\" button is clicked\n    if (this.state.redirect) {  \n      return (<Redirect to=\"/userProfile\"/>);\n    }\n\n    // Render the login form (and call \"handleSubmit\" method when \"Log In\" button is clicked to submit form)\n    return (\n      <div>\n        <h1>Login</h1>\n        \n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>User Name</label>\n            <input type=\"text\" name=\"userName\" defaultValue={this.props.user.userName} onChange={this.handleChange} />\n          </div>\n          <div>\n            <label>Password</label>\n            <input type=\"password\" name=\"password\" />\n          </div>\n          <button>Log In</button>\n        </form>  \n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default LogIn;","/*==================================================\nsrc/components/Credits.js\n\nThe Credits component contains information for Credits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Credits extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      amount: 0,\n      description: \"\",\n    }\n  }\n\n  // sets the credit amount\n  setAmount = (e) => {\n    this.setState({amount: parseInt(e.target.value)});\n  }\n\n  // sets the credit description\n  setDescription = (e) => {\n    this.setState({description: e.target.value});\n  }\n\n  // adds the transaction once the submit button has been clicked\n  handleSubmit = (e) => {\n    e.preventDefault(); // prevent the page from reloading after form is submitted\n\n    let date = new Date(); // create a new date instance\n    \n    // create a credit object\n    let credit = {\n      id: this.generateId(),\n      amount: this.state.amount,\n      description: this.state.description,\n      date: date.toISOString(),\n    }\n\n    // add the credit to the records\n    this.props.addCredit(credit);\n  }\n\n  // generates an id tha is incremented by one from the last max id\n  generateId = () => {\n    let id = 0;\n\n    this.props.credits.forEach((credit, index) => {\n      if(credit.id > id){\n        id = credit.id;\n      }\n    });\n\n    return id + 1;\n  }\n\n  // Create the list of Credit items\n  creditsView = () => {\n    return this.props.credits.map((credit) => {  // Extract \"id\", \"amount\", \"description\" and \"date\" properties of each credit JSON array element\n      let date = credit.date.slice(0,10);\n      \n      return(<tr key={credit.id}>\n        <td>{date}</td>\n        <td>${Number(credit.amount).toFixed(2)}</td>\n        <td>{credit.description}</td>\n      </tr>)\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <h1>Credits</h1>\n        <h2>Account Balance: ${Number(this.props.accountBalance).toFixed(2)}</h2>\n  \n        <h3>Add Credit</h3>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>Credit Amount</label><br/>\n            <input type = \"number\" name = \"amount\" required placeholder=\"credit amount\" onChange={this.setAmount} />\n          </div>\n  \n          <div>\n            <label >Description</label><br/>\n            <textarea name = \"description\" required placeholder=\"description\" onChange={this.setDescription} />\n          </div>\n  \n          <button type = \"submit\">Add Credit</button>\n  \n        </form>\n  \n        <h3>Previous Credits</h3>\n        \n        <table style={{margin: \"0 auto\"}}>\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Amount</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n  \n            <tbody>\n              {this.creditsView()}\n            </tbody>\n        </table>\n        \n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Credits;","/*==================================================\nsrc/components/Debits.js\n\nThe Debits component contains information for Debits page view.\nNote: You need to work on this file for the Assignment.\n==================================================*/\nimport React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass Debits extends Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      amount: 0,\n      description: \"\"\n    }\n\n  }\n  \n  // Create the list of Debit items\n  debitsView = () => {\n    return this.props.debits.map((debit) => {  // Extract \"id\", \"amount\", \"description\" and \"date\" properties of each debits JSON array element\n      let date = debit.date.slice(0,10);\n      \n      return(<tr key={debit.id}>\n        <td>{date}</td>\n        <td>${Number(debit.amount).toFixed(2)}</td>\n        <td>{debit.description}</td>\n      </tr>)\n    });\n  }\n\n  // update the amount state when the user changes the amount\n  updateAmount = (e) => {\n    this.setState({amount: parseInt(e.target.value)})\n  }\n\n  // update the description state when the user changes the description\n  updateDescription = (e) => {\n    this.setState({description: e.target.value})\n  }\n\n  // generates an id tha is incremented by one from the last max id\n  generateId = () => {\n    let id = 0;\n\n    this.props.debits.forEach((debit, index) => {\n      if(debit.id > id){\n        id = debit.id;\n      }\n    });\n\n    return id + 1;\n  }\n\n  // handle the form submission\n  handleSubmit = (e) => { \n    e.preventDefault(); // prevent the page from reloading after\n\n    let date = new Date();\n\n    // create a debit object\n    let debit = {\n      id: this.generateId(),\n      amount: this.state.amount,\n      description: this.state.description,\n      date: date.toISOString(),\n    }\n\n    this.props.addDebit(debit);\n  }\n  \n  render(){\n    // Render the list of Debit items and a form to input new Debit item\n    return (\n      <div>\n        <h1>Debits</h1>\n        <h2>Account Balance ${Number(this.props.accountBalance).toFixed(2)}</h2>\n\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label>Amount</label><br />\n            <input type=\"number\" name=\"amount\" onChange={this.updateAmount} placeholder = \"debit amount\" required />\n          </div>\n\n          <div>\n            <label>Description</label><br />\n            <input type=\"text\" name=\"description\" onChange={this.updateDescription} placeholder = \"description\" required />\n          </div>\n\n          <button type=\"submit\">Add Debit</button>\n        </form>\n\n        <h3>Previous Credits</h3>\n        <table style={{margin: \"0 auto\"}}>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Amount</th>\n              <th>Description</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.debitsView()}\n          </tbody>\n          \n        </table>\n\n        <br/>\n        <Link to=\"/\">Return to Home</Link>\n      </div>\n    );\n  }\n}\n\nexport default Debits;","/*==================================================\nsrc/App.js\n\nThis is the top-level component of the app.\nIt contains the top-level state.\n==================================================*/\nimport React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n// Import other components\nimport Home from './components/Home';\nimport UserProfile from './components/UserProfile';\nimport LogIn from './components/Login';\nimport Credits from './components/Credits';\nimport Debits from './components/Debits';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor() {  // Create and initialize state\n    super(); \n    this.state = {\n      accountBalance: 0,\n      creditList: [],\n      debitList: [],\n      currentUser: {\n        userName: 'Joe Smith',\n        memberSince: '11/22/99',\n      }\n    };\n  }\n\n  // Update state's currentUser (userName) after \"Log In\" button is clicked\n  mockLogIn = (logInInfo) => {  \n    const newUser = {...this.state.currentUser};\n    newUser.userName = logInInfo.userName;\n    this.setState({currentUser: newUser})\n  }\n\n  // adds a credit to the users records and updates the account balance\n  addCredit = (credit) => {\n    const newCreditList = this.state.creditList; // get the current array of credits\n    newCreditList.push(credit); // add the new credit to the credits array\n    this.setState({creditList: newCreditList}); // update the credits state\n    \n    this.updateAccountBalance(); // update the account balance state\n    \n  }\n\n  // adds a debit to the users records and updates the account balance\n  addDebit = (debit) => {\n    const newDebitList = this.state.debitList; // get the current array of debits\n    newDebitList.push(debit); // add the new debit to the debits array\n    this.setState({debitList: newDebitList}); // update the debits state\n    \n    this.updateAccountBalance(); // update the account balance state \n  }\n\n  // updates the account balance\n  updateAccountBalance = () => {\n    let newBalance = 0;\n\n    // loop through the credits\n    this.state.creditList.forEach(credit => {\n      newBalance += credit.amount;\n    });\n\n    // loop through the credits\n    this.state.debitList.forEach(debit => {\n      newBalance -= debit.amount;\n    });\n\n    // update the accountBalance\n    this.setState({accountBalance: newBalance});\n  }\n\n  // load credits and debits from API\n  async componentDidMount(){\n    let linkToCredits = \"https://johnnylaicode.github.io/api/credits.json\";\n    let linkToDebits = \"https://johnnylaicode.github.io/api/debits.json\";\n\n    // Await for promise (completion) returned from API call\n    try {  // Accept success response as array of JSON objects (users)\n      let response = await axios.get(linkToCredits);\n\n      // update the account balance\n      this.updateAccountBalance();\n      \n      // get JSON data from response\n      this.setState({creditList: response.data});  // Store the data in the credits state\n    } \n    catch (error) {  // Print out errors at console when there is an error response\n      if (error.response) {\n        // The request was made, and the server responded with error message and status code.\n        console.log(error.response.data);  // Print out error message (e.g., Not Found)\n        console.log(error.response.status);  // Print out error status code (e.g., 404)\n      }    \n    }\n\n    // Await for promise (completion) returned from API call\n    try {  // Accept success response as array of JSON objects (users)\n      let response = await axios.get(linkToDebits);\n\n      // update the account balance\n      this.updateAccountBalance();\n      \n      // get JSON data from response\n      this.setState({debitList: response.data});  // Store the data in the debits state\n    } \n    catch (error) {  // Print out errors at console when there is an error response\n      if (error.response) {\n        // The request was made, and the server responded with error message and status code.\n        console.log(error.response.data);  // Print out error message (e.g., Not Found)\n        console.log(error.response.status);  // Print out error status code (e.g., 404)\n      }    \n    }\n    \n  }\n\n  // Create Routes and React elements to be rendered using React components\n  render() {  \n    // Create React elements and pass input props to components\n    const HomeComponent = () => (<Home accountBalance={this.state.accountBalance} />)\n    const UserProfileComponent = () => (\n      <UserProfile userName={this.state.currentUser.userName} memberSince={this.state.currentUser.memberSince} />\n    )\n    const LogInComponent = () => (<LogIn user={this.state.currentUser} mockLogIn={this.mockLogIn} />)\n    const CreditsComponent = () => (<Credits credits={this.state.creditList} addCredit={this.addCredit} accountBalance={this.state.accountBalance} />) \n    const DebitsComponent = () => (<Debits debits={this.state.debitList} addDebit={this.addDebit} accountBalance={this.state.accountBalance} />) \n\n    // Important: Include the \"basename\" in Router, which is needed for deploying the React app to GitHub Pages\n    return (\n      <Router basename=\"/my-react-app\">\n        <div>\n          <Route exact path=\"/\" render={HomeComponent}/>\n          <Route exact path=\"/userProfile\" render={UserProfileComponent}/>\n          <Route exact path=\"/login\" render={LogInComponent}/>\n          <Route exact path=\"/credits\" render={CreditsComponent}/>\n          <Route exact path=\"/debits\" render={DebitsComponent}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*==================================================\nsrc/index.js\n\nThis file renders the top-level component App which contains all components of the app).\n==================================================*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// Note: In above, StrictMode is a tool for highlighting potential problems in an application. \n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}